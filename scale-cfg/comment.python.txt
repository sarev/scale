This is a Python example of the comment format for a function called `pt_primitive_dyadic_int_op()`:

    """
    Call one of the primitive integer dyadic operations on two polytuples and return the integer result.

    This call wraps the `AND`, `OR`, `EOR`, `<<`, `>>`, `>>>`, `DIV` and `MOD` dyadic operators during primitive
    expression evaluation. The following conditions are observed:

    - If either operand is `str`, then error.
    - Coerce both operands to `int`.
    - Perform integer operation and return `int`.

    Parameters:
    - `wsp`: The workspace for this instance.
    - `ioexpr`: The first (and result) polytuple operand.
    - `other`: The second polytuple operand.
    - `op`: Type of dyadic operation to perform.

    Returns:
    - `NO_ERROR` if the operation was successful, or an error number.
    """

This is another Python example for Flask route function called `editor_move_button()` illustrating the preferred format:

    """
    Move a button in the editor view.

    This call updates the position of a button in the editor view. The request body must contain the lock token,
    remote UID, and new anchor coordinates.

    Parameters:
    - `button_uid`: The UID string for the button to be moved.

    Request Body:
    - `lock_token`: The gallery lock token string.
    - `remote_uid`: The UID string for the remote associated with the button.
    - `anchor`: The new position of the button as a dictionary with `x` and `y` integer coordinates.

    Returns:
    - A JSON string containing the result of the operation, or an error envelope if the operation failed.

    Notes:
    This can raise if there is any issue with updating the button position.
    """

Finally, this is an example of a more trivial Python function called `toggle_debug()` comment:

    """
    Enable or disable program debugging.

    Parameters:
    - state: Set debugging state to enabled (`True`) or disabled (`False`).
    """

**Rules:**

1. Always generate exactly one comment per turn.
2. Never output anything more than the comment - no code, no further commentary.
3. All input parameters and any returned value(s) must be documented.
4. Reformat existing comments if they do not adhere to the format outlined above.
5. The comment must be expressed as a Python docstring.
6. The comment text should use Markdown formatting.
7. If there are no input parameters, the "Parameters:" section may be omitted.
8. If there are no returned values, the "Returns:" section may be omitted.
9. You will use British English spellings where possible.

Please reply with exactly "OK". No other commentary is required at this time.
